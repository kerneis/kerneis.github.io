[{"categories":null,"content":"I work as a Security Researcher at ANSII, the National Cybersecurity Agency of France. My research focuses on firmwares, trusted environment and secure boot mechanisms. I was previously a Senior Software Engineer at Google Paris, working on Fuchsia and Google Arts \u0026 Culture. In a former academic life, I was a Research Assistant in Peter Sewell’s team at the University of Cambridge. I did my PhD thesis at Université Paris Diderot under the direction of Juliusz Chroboczek. This is my personal website. The views expressed here are my own, not those of my current or past employers. If you need to reach out: contact@gabriel.kerneis.info. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"During my PhD, I worked on CPC, an experimental dialect of the C language, designed to write concurrent programs. A CPC program is compiled into plain C through a series of source-to-source transformations. During my Post-Doc, I worked on a formal model of a user-mode fragment of the POWER instruction set, for the REMS project in Cambridge. You can find find my publications below, or on my ResearchGate profile. ","date":"0001-01-01","objectID":"/research/:0:0","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"Continuation-Passing C (CPC) CPC was a programming language for writing concurrent systems, designed and developped by Juliusz Chroboczek and Gabriel Kerneis. The CPC programmer manipulates very lightweight threads, choosing whether they should be cooperatively or preemptively scheduled at any given point; the CPC program is then processed by the CPC translator, which produces highly efficient event-loop code. This approach gives the best of both worlds: the relative convenience of programming with threads, and the low memory usage of event-loop code. The semantics of CPC is defined as a source-to-source translation from CPC into plain C using a technique known as conversion into Continuation Passing Style. CPC has been used to write Hekate, a BitTorrent seeder designed to handle millions of simultaneous torrents and tens of thousands of simultaneously connected peers, and to compile coroutines in the QEMU emulator during Google Summer of Code 2013. ","date":"0001-01-01","objectID":"/research/:1:0","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"Code CPC, Hekate and QEMU/CPC are not maintained anymore, but their archived source code is still available: CPC source code Hekate source code QEMU/CPC source code ","date":"0001-01-01","objectID":"/research/:1:1","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"Publications Workshop paper on Hekate: Gabriel Kerneis, Juliusz Chroboczek. CPC: programming with a massive number of lightweight threads. PLACES'11 (2011). Slides. Workshop paper on QEMU/CPC: Gabriel Kerneis, Charlie Shepherd, Stefan Hajnoczi. QEMU/CPC: Static Analysis and CPS Conversion for Safe, Portable, and Efficient Coroutines. PEPM'14, San Diego, CA, USA, January 20-21, 2014. Journal article on CPC compilation: Gabriel Kerneis, Juliusz Chroboczek. Continuation-Passing C, compiling threads to events through continuations. Higher-Order and Symbolic Computation 24(3): 239-279 (2011). Companion paper. PhD thesis: Gabriel Kerneis. Continuation-Passing C: Program Transformation for Compiling Concurrency in an Imperative Language. PhD thesis. Laboratoire PPS, Université Paris Diderot (2012). Experiment on an alternative version of CPC where local variables are saved in environments rather than lambda-lifted: Matthieu Boutier, Gabriel Kerneis. Generating events with style. Unpublished draft (2012). Report on some early benchmarks: Gabriel Kerneis, Juliusz Chroboczek. Are events fast?. Technical report, Université Paris Diderot (2009). ","date":"0001-01-01","objectID":"/research/:1:2","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"POWER ISA modelling ","date":"0001-01-01","objectID":"/research/:2:0","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"Code The Sail ISA specification language. I worked more specifically on the Sail IBM POWER ISA model, automatically generated from IBM XML documentation. ","date":"0001-01-01","objectID":"/research/:2:1","tags":null,"title":"Research","uri":"/research/"},{"categories":null,"content":"Publication Kathryn E. Gray, Gabriel Kerneis, Dominic Mulligan, Christopher Pulte, Susmit Sarkar, and Peter Sewell. An integrated concurrency and core-ISA architectural envelope definition, and test oracle, for IBM POWER multiprocessors. MICRO-48, Waikiki, Hawaii, USA, December 5-9, 2015. ","date":"0001-01-01","objectID":"/research/:2:2","tags":null,"title":"Research","uri":"/research/"}]